// -----------------------------------main.c -------------------------------------
#include "mbox.h"
#include "uart.h"
#include "printf.h"

#define MAX_CMD_SIZE 100
#define ANSI_CLEAR_SCREEN "\x1B[2J\x1B[H"

const char *welcomeString = 
    " ******** ******** ******** **********    ****     **   ****   ****   \n"
    "/**///// /**///// /**///// /////**///    */// *   */*  */// * *///**  \n"
    "/**      /**      /**          /**      /    /*  * /* /*   /*/*  */*  \n"
    "/******* /******* /*******     /**         ***  ******/ **** /* * /*  \n"
    "/**////  /**////  /**////      /**        *//  /////*  ///*  /**  /*  \n"
    "/**      /**      /**          /**       *         /*    *   /*   /*  \n"
    "/********/********/********    /**      /******    /*   *    / ****   \n"
    "//////// //////// ////////     //       //////     /   /      ////    \n"
    " ******       **     *******   ********     *******    ********       \n"
    "/*////**     ****   /**////** /**/////     **/////**  **//////        \n"
    "/*   /**    **//**  /**   /** /**         **     //**/**              \n"
    "/******    **  //** /*******  /*******   /**      /**/*********       \n"
    "/*//// ** **********/**///**  /**////    /**      /**////////**       \n"
    "/*    /**/**//////**/**  //** /**        //**     **        /**       \n"
    "/******* /**     /**/**   //**/********   //*******   ********        \n"
    "///////  //      // //     // ////////     ///////   ////////          \n\n"
    "   Developed by Pham Trinh Hoang Long - s3879366\n\n"
    "   Type help to show the commands info\n\n";

const char *initialText = "MyOS> ";

const char *helpInfo = 
    "For more information on a specific command, type help command-name\n"
    "\nhelp: Show brief information of all commands\n\n"
    "clear: Clear screen\n\n"
    "setcolor: Set text color and/or background color of the console\n\n"
    "showinfo: Show board revision and board MAC address\n\n";

const char *fullInfoClearCommand =
    "\nClear screen (in our terminal it will scroll down to current position of the cursor)\n"
    "\nExample: MyOS> clear\n\n";

const char *fullInfoSetcolorCommand =
    "\nSet text color, and/or background color of the console to one of the following colors: BLACK, RED, GREEN, YELLOW, BLUE, PURPLE, CYAN, WHITE\n"
    "\nExamples: \n"
    "MyOS> setcolor -t yellow\n"
    "MyOS> setcolor -b yellow -t white\n\n";

const char *fullInfoShowInfoCommand = 
    "\nShow board revision and board MAC address in correct format/ meaningful information\n"
    "\nExample: MyOS> showinfo\n\n";

volatile int check = 0;
volatile int commandHistoryCount = 0;
volatile int currentCommandHistoryCount = 0;
volatile char commandHistory[100][100];

void CopyString(char* st1, char* st2) {
    int i = 0;
    for (i = 0; st1[i] != '\0'; i++) {
        st2[i] = st1[i];
    }
    commandHistory[commandHistoryCount][i] = '\0';
}

#define MAX_COMMANDS 4
const char *supportedCommands[MAX_COMMANDS] = {
    "help",
    "clear",
    "setcolor",
    "showinfo"
};

void printWelcomeString() {
    uart_puts(welcomeString);
}

void printInitialText() {
    uart_puts(initialText);
}

int compare_strings(const char *str1, const char *str2) {
    while (*str1 != '\0') {
        if (*str1 != *str2) {
            return 0; // Strings are not equal
        }
        str1++;
        str2++;
    }
    
    // Check if both strings have reached the end (null terminator)
    if (*str1 == '\0') {
        return 1; // Strings are equal
    }
    
    return 0; // Strings are not equal
}

char *stringRemainingWhenTabbed(const char *str1, const char *str2) {
    int count = 0;
    char stringRemaining[count];
    while (*str1 != '\0') {
            str2++;
        str1++;
        str2++;
    }
    while (*str2 != '\0')
    {
        stringRemaining[count] = *str2;
        count++;
    }
    
    return stringRemaining;
}

void delete(int array[], int size, int index) {
    if (index < 0 || index >= size) {
        return;
    }

    for (int i = index; i < size - 1; i++) {
        array[i] = array[i + 1];
    }
}

int countLetters(const char *str) {
    int count = 0;

    // Iterate through each character in the string
    for (int i = 0; str[i] != '\0'; i++) {
        count++;
    }

    return count;
}

void print_mac_address(const unsigned char *mac) {
    for (int i = 6; i >= 0; i--) {
        uart_dec(mac[i] % 16);  // Print last digit
        uart_dec(mac[i] / 16);  // Print second last digit
        if (i > 0) {
            uart_puts("-");
        }
    }
    uart_puts("\n");
}

void print_board_revision(const unsigned int *mac) {
    if (mac = 0x00A02082)
    {
        uart_puts("rpi-3B BCM2837 1GiB Sony UK");
    }
    else if (mac = 0x00900092)
    {
        uart_puts("rpi-Zero BCM2835 512MB Sony UK");
    }
    else if (mac = 0x00000010)
    {
        uart_puts("rpi-1B+ BCM2835");
    }
    else if (mac = 0x00a01041)
    {
        uart_puts("rpi-2B BCM2836 1GiB Sony UK");
    }
    else
    {
        uart_puts("rpi-4B BCM2711 2GiB Sony UK");
    }
    
    
}

void handleShowInfoCommand() {
    // mailbox data buffer: Read ARM frequency, firmware revision, UART clock rate, board revision, board MAC address
    mBuf[0] = 30*4; // Message Buffer Size in bytes
    mBuf[1] = MBOX_REQUEST; // Message Request Code

    mBuf[2] = 0x00030002; // TAG Identifier: Get clock rate (ARM clock)
    mBuf[3] = 8; // Value buffer size in bytes
    mBuf[4] = 0; // REQUEST CODE = 0
    mBuf[5] = 3; // clock id: ARM system clock
    mBuf[6] = 0; // clear output buffer (response data are mBuf[5] & mBuf[6])

    mBuf[7] = 0x00000001; // TAG Identifier: Get firmware revision
    mBuf[8] = 4; // Value buffer size in bytes
    mBuf[9] = 0; // REQUEST CODE = 0
    mBuf[10] = 0; // clear output buffer (response data are mBuf[10])

    mBuf[11] = 0x00030002; // TAG Identifier: Get clock rate (UART clock)
    mBuf[12] = 8; // Value buffer size in bytes
    mBuf[13] = 0; // REQUEST CODE = 0
    mBuf[14] = 2; // clock id: UART clock
    mBuf[15] = 0; // clear output buffer (response data are mBuf[14] & mBuf[15])

    mBuf[16] = 0x00010002; // TAG Identifier: Get board revision
    mBuf[17] = 4; // Value buffer size in bytes
    mBuf[18] = 0; // REQUEST CODE = 0
    mBuf[19] = 0; // clear output buffer (response data are mBuf[19])

    mBuf[20] = 0x00010003; // TAG Identifier: Get board MAC address
    mBuf[21] = 6*2; // Value buffer size in bytes
    mBuf[22] = 0; // REQUEST CODE = 0
    mBuf[23] = 0; // clear output buffer (response data are mBuf[23])

    mBuf[24] = MBOX_TAG_LAST;
    
    if (mbox_call(ADDR(mBuf), MBOX_CH_PROP)) {
        uart_puts("\nDATA: board revision = ");
        print_board_revision(&mBuf[19]);

        uart_puts("\n+ Response Code in Message TAG (Board MAC address): ");
        uart_hex(mBuf[22]);
        uart_puts("\nDATA: board MAC address = ");
        print_mac_address((unsigned char*)&mBuf[23]);

    } else {
        uart_puts("Unable to query!\n");
    }
}

char *myStrchr(const char *str, int character) {
    while (*str != '\0') {
        if (*str == character) {
            return (char *)str; // Found the character
        }
        str++;
    }
    
    return '\0'; // Character not found
}

void getStringAfterSpace(const char *input, char *output) {
    const char *spacePtr = myStrchr(input, ' '); // Find the first space character

    if (spacePtr) {
        // Copy the substring after the space character
        CopyString(spacePtr + 1, output);
    } else {
        // No space character found, copy an empty string
        CopyString("", output);
    }
}

int contains(const char *str, const char *subStr) {
    int strLength = countLetters(str);
    int subStrLength = countLetters(subStr);

    for (int i = 0; i <= strLength - subStrLength; i++) {
        int j;

        for (j = 0; j < subStrLength; j++) {
            if (str[i + j] != subStr[j]) {
                break; // Characters don't match, exit inner loop
            }
        }

        if (j == subStrLength) {
            return 1; // Found the substring
        }
    }

    return 0; // Substring not found
}

int myStrcmp(const char *str1, const char *str2) {
    while (*str1 != '\0' && *str2 != '\0') {
        if (*str1 < *str2) {
            return -1;
        } else if (*str1 > *str2) {
            return 1;
        }
        str1++;
        str2++;
    }

    // At this point, one or both strings have ended
    if (*str1 == '\0' && *str2 == '\0') {
        return 0; // Both strings are equal
    } else if (*str1 == '\0') {
        return -1; // str1 is shorter than str2
    } else {
        return 1; // str2 is shorter than str1
    }
}

#define MAX_COLOR_LEN 10

typedef enum {
    COLOR_BLACK,
    COLOR_RED,
    COLOR_GREEN,
    COLOR_YELLOW,
    COLOR_BLUE,
    COLOR_PURPLE,
    COLOR_CYAN,
    COLOR_WHITE,
    COLOR_INVALID
} Color;

// Function to convert color string to Color enum
Color getColorEnum(const char *colorStr) {
    if (myStrcmp(colorStr, "black") == 0) return COLOR_BLACK;
    if (myStrcmp(colorStr, "red") == 0) return COLOR_RED;
    if (myStrcmp(colorStr, "green") == 0) return COLOR_GREEN;
    if (myStrcmp(colorStr, "yellow") == 0) return COLOR_YELLOW;
    if (myStrcmp(colorStr, "blue") == 0) return COLOR_BLUE;
    if (myStrcmp(colorStr, "purple") == 0) return COLOR_PURPLE;
    if (myStrcmp(colorStr, "cyan") == 0) return COLOR_CYAN;
    if (myStrcmp(colorStr, "white") == 0) return COLOR_WHITE;
    return COLOR_INVALID;
}

void setConsoleColor(Color textColor, Color bgColor) {
    // ANSI escape codes for setting text and background colors
    const char *textColorCodes[] = {
        "\x1B[30m", // Black
        "\x1B[31m", // Red
        "\x1B[32m", // Green
        "\x1B[33m", // Yellow
        "\x1B[34m", // Blue
        "\x1B[35m", // Purple
        "\x1B[36m", // Cyan
        "\x1B[37m"  // White
    };

    const char *bgColorCodes[] = {
        "\x1B[40m", // Black
        "\x1B[41m", // Red
        "\x1B[42m", // Green
        "\x1B[43m", // Yellow
        "\x1B[44m", // Blue
        "\x1B[45m", // Purple
        "\x1B[46m", // Cyan
        "\x1B[47m"  // White
    };

    // Reset text and background colors to default
    uart_puts("\x1B[0m");

    // Set text color if valid
    if (textColor >= COLOR_BLACK && textColor <= COLOR_WHITE) {
        uart_puts(textColorCodes[textColor]);
    }

    // Set background color if valid
    if (bgColor >= COLOR_BLACK && bgColor <= COLOR_WHITE) {
        uart_puts(bgColorCodes[bgColor]);
    }
}

char *myStrpbrk(const char *str, const char *accept) {
    // uart_puts("");
    while (*str != '\0') {
        const char *a = accept;
        while (*a != '\0') {
            if (*str == *a) {
                return (char *)str;
            }
            a++;
        }
        str++;
    }
    return '\0';
}

char *myStrtok_r(char *str, const char *delim, char **saveptr) {
    if (str[0] == '\0' && (*saveptr == '\0' || **saveptr == '\0')) {
        return '\0';
    }

    if (str[0] != '\0') {
        *saveptr = str;
    }

    char *token = *saveptr;
    // uart_puts("");
    char *delimiter = myStrpbrk(*saveptr, delim);

    if (delimiter[0] != '\0') {
        *delimiter = '\0';
        *saveptr = delimiter + 1;
    } else {
        *saveptr = *saveptr + countLetters(*saveptr);
    }
    // uart_puts(token);
    return token;
}

char *myStrstr(const char *haystack, const char *needle) {
    if (*needle == '\0') {
        return (char *)haystack;
    }

    while (*haystack) {
        const char *h = haystack;
        const char *n = needle;

        while (*h && *n && (*h == *n)) {
            h++;
            n++;
        }

        if (*n == '\0') {
            return (char *)haystack; // Found the needle in the haystack
        }

        haystack++;
    }

    return '\0'; // Needle not found
}

int custom_sscanf_string(const char *str, const char *format, char *output) {
    int matched = 0;
    int inSpecifier = 0;
    int outputIndex = 0;

    while (*str && *format) {
        if (*format == '%' && !inSpecifier) {
            inSpecifier = 1;
            format++;
        } else if (inSpecifier) {
            if (*format == 's') {
                while (*str && *str != ' ') {
                    output[outputIndex++] = *str;
                    str++;
                }
                output[outputIndex] = '\0'; // Add null-terminator
                matched++;
                inSpecifier = 0;
                format++;
                while (*str && *str == ' ') {
                    str++;
                }
            } else {
                inSpecifier = 0;
                format++;
            }
        } else {
            if (*str != *format) {
                break;
            }
            str++;
            format++;
        }
    }

    return matched;
}

void myStrcpy(char *dest, const char *src) {
    while (*src) {
        *dest = *src;
        dest++;
        src++;
    }
    *dest = '\0'; // Add null-terminator at the end
}

void extractValues(const char *input, char *command, char *tOption, char *bOption) {
    // Extract the command
    custom_sscanf_string(input, "%s", command);
    
    // Find the "-t" option
    const char *tPos = myStrstr(input, "-t");
    if (tPos) {
        custom_sscanf_string(tPos, "-t %s", tOption);
    } else {
        myStrcpy(tOption, ""); // No "-t" option found
    }
    
    // Find the "-b" option
    const char *bPos = myStrstr(input, "-b");
    if (bPos) {
        custom_sscanf_string(bPos, "-b %s", bOption);
    } else {
        myStrcpy(bOption, ""); // No "-b" option found
    }
}

void cli()
{
	static char cli_buffer[MAX_CMD_SIZE];
	static int index = 0;

    if (check == 0)
    {
        printInitialText();
        check = 1;
    }

	//read and send back each char
	char c = uart_getc();

    if (c == '\t')
    {
        // Auto-completion logic
        for (int i = 0; i < MAX_COMMANDS; i++) {
            if (contains(supportedCommands[i], cli_buffer) == 1) {
                for (int i = 0; i < countLetters(cli_buffer); i++)
                {
                    uart_delete();
                }

                for (int j = 0; j < countLetters(supportedCommands[i]); j++)
                {
                    cli_buffer[j] = supportedCommands[i][j]; //Store into the buffer
                }
                index = countLetters(cli_buffer);
                uart_puts(cli_buffer);
                
                break;
            }
        }
    }
    else if(c == 127 && index > 0) {
        uart_delete();
        index--;
        if (index <= 0)
        {
            //clear buffer
            for (int i = 0; cli_buffer[i] != '\0'; i++)
            {
                cli_buffer[i] = '\0';
            }
            index = 0;
        }
        cli_buffer[index] = "";
    }
    else if (c == 95)
    {
        index  = 0;
        for (int i = 0; i < countLetters(commandHistory[commandHistoryCount]) ; i++)
        {
            uart_delete();
        }
        
        //clear buffer
        for (int i = 0; cli_buffer[i] != '\0'; i++)
        {
            cli_buffer[i] = '\0';
        }

        commandHistoryCount--;
        if (commandHistoryCount < 0)
        {
            commandHistoryCount = 0;
        }
        
        if (commandHistoryCount == 0) {}
        {
            for (int j = 0; j < countLetters(commandHistory[commandHistoryCount]); j++)
            {
                cli_buffer[j] = commandHistory[commandHistoryCount][j]; //Store into the buffer
                index++;
            }
            uart_puts(commandHistory[commandHistoryCount]);
        }
    }
    else if (c == 43)
    {   
        index  = 0; 
        for (int i = 0; i < countLetters(commandHistory[commandHistoryCount]) ; i++)
        {
            uart_delete();
        }
            
        //clear buffer
        for (int i = 0; cli_buffer[i] != '\0'; i++)
        {
            cli_buffer[i] = '\0';
        }

        commandHistoryCount++;

        if (commandHistoryCount == 0) {}
        {
            index  = 0;
            for (int j = 0; j < countLetters(commandHistory[commandHistoryCount]); j++)
            {
                cli_buffer[j] = commandHistory[commandHistoryCount][j]; //Store into the buffer
                index++;
            }
            uart_puts(commandHistory[commandHistoryCount]);
        }
    }
    else {
        uart_sendc(c);
    }
    

	//put into a buffer until got new line character
	if (c != '\n' && c != 95 && c != '\t'){
		cli_buffer[index] = c; //Store into the buffer

		// index++;
        if(c != 127) {
            index++;
        } 
	} else if (c == '\n'){
		cli_buffer[index] = '\0';
        uart_puts("\n");

        CopyString(cli_buffer, commandHistory[currentCommandHistoryCount]);

        currentCommandHistoryCount++;
        commandHistoryCount = currentCommandHistoryCount;

		/* Compare with supported commands and execute
		* ........................................... */
        //Help Command
        if(contains(cli_buffer, "help") == 1) {
            char stringAfterSpace[100] = {};
            getStringAfterSpace(cli_buffer, stringAfterSpace);
            int matchCommand = 0;

            for (int i = 0; i < MAX_COMMANDS; i++) {
                if (contains(stringAfterSpace, supportedCommands[i]) == 1) {
                    matchCommand = 1;
                }
            }

            if (matchCommand == 0)
            {
                if (myStrcmp(cli_buffer, "help") == 0
                )
                {
                    //Show All Command Brief Introduction
                    uart_puts(helpInfo);
                }
                else {
                    //Show a message that no command found
                    uart_puts("\nNo command found to show full information\n\n");
                }
            }
            //Show Detail Command
            else {
                if (compare_strings(stringAfterSpace, "clear") == 1)
                {
                    uart_puts(fullInfoClearCommand);
                }
                else if (compare_strings(stringAfterSpace, "setcolor") == 1)
                {
                    uart_puts(fullInfoSetcolorCommand);
                }
                else if (compare_strings(stringAfterSpace, "showinfo") == 1)
                {
                    uart_puts(fullInfoShowInfoCommand);
                }
            }

        }

        //Clear Command
        if (myStrcmp(cli_buffer, "clear") == 0) {
            uart_puts(ANSI_CLEAR_SCREEN);
        }

        //Show Info Command
        if (compare_strings(cli_buffer, "showinfo") == 1) {
            handleShowInfoCommand();
        }

        //Set Color Command
        if(contains(cli_buffer, "setcolor") == 1) {
            char command[100];
            char tOption[100];
            char bOption[100];

            Color textColor = COLOR_INVALID;
            Color bgColor = COLOR_INVALID;

            extractValues(cli_buffer, command, tOption, bOption);

            if (myStrcmp(command, "setcolor") == 0)
            {
                if (tOption[0] != '\0')
                {
                    textColor = getColorEnum(tOption);
                }

                if (bOption[0] != '\0')
                {
                    bgColor = getColorEnum(bOption);
                }
            }

            if (textColor != COLOR_INVALID || bgColor != COLOR_INVALID) {
                setConsoleColor(textColor, bgColor);
            } else {
                uart_puts("Invalid color options.\n");
            }
        }

        //clear buffer
        for (int i = 0; cli_buffer[i] != '\0'; i++)
        {
            cli_buffer[i] = '\0';
        }

		//Return to command line
		index = 0;
        check = 0;
	}
}

void main(){
    // set up serial console
	uart_init();
    //Q2
    int integerNumber = -42;
    char character = 'A';
    char name[] = "Alice";
    float floatingNumber = 3.14159;
    int hexadecimalNumber = 255;

    uart_puts("\nQuestion 2\n");

    // %d - integer, %c - character, %s - string, %f - float, %x - hexadecimal, %% - literal %
    printf("Integer (%%d): %d\n", integerNumber);
    printf("Character (%%c): %c\n", character);
    printf("String (%%s): %s\n", name);
    printf("Float (%%f): %f\n", floatingNumber);
    printf("Hexadecimal (%%x): %x\n", hexadecimalNumber);
    printf("Literal %%: %%\n");

    // Using 0 flag to pad with zeros
    printf("Padded Integer (%%04d): %04d\n", integerNumber);

    // Using width and precision for floating-point number
    printf("Float with Width and Precision (%%10.2f): %10.2f\n", floatingNumber);

    //Q3
    uart_puts("\nQuestion 3\n");
    unsigned int *physize = 0; //pointer to response data
    mbox_buffer_setup(ADDR(mBuf), MBOX_TAG_SETPHYWH, &physize, 8, 8, 1024, 768);
    mbox_call(ADDR(mBuf), MBOX_CH_PROP);
    uart_puts("\nGot Actual Physical Width: ");
    uart_dec(physize[0]);
    uart_puts("\nGot Actual Physical Height: ");
    uart_dec(physize[1]);

    uart_puts("\n\nQuestion 1\n");
    // print welcome screen
    printWelcomeString();

    // run CLI
    while(1) {
    	cli();
    }
}
